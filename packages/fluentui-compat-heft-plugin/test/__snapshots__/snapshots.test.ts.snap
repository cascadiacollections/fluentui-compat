// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FluentStyleExtractor Snapshot Tests should match snapshot for basic button component transformation: basic-button-transformation 1`] = `
{
  "input": {
    "code": "export const getStyles = (props) => {
  const { theme, primary, disabled } = props;
  const { palette } = theme || { palette: { themePrimary: '#0078d4', white: '#ffffff' } };

  return {
    root: [
      'ms-Button',
      {
        backgroundColor: primary ? palette.themePrimary : palette.white,
        color: primary ? palette.white : '#323130',
        border: \`1px solid \${primary ? palette.themePrimary : '#f3f2f1'}\`,
        padding: '8px 16px',
        borderRadius: '2px',
        cursor: 'pointer',
        display: 'inline-flex',
        alignItems: 'center',
        fontFamily: 'Segoe UI',
        fontSize: '14px',
        selectors: {
          ':hover': {
            opacity: 0.8
          },
          ':focus': {
            outline: '2px solid #0078d4'
          }
        }
      },
      disabled && {
        opacity: 0.5,
        cursor: 'not-allowed'
      }
    ]
  };
};",
    "file": "Button.styles.ts",
  },
  "metadata": {
    "classPrefix": "fui",
    "filesProcessed": 1,
    "stylesExtracted": 3,
  },
  "output": {
    "css": "/* FluentUI Extracted Styles */
/* Generated by Heft FluentUI Style Extractor */

:root {
  --colorBrandBackground: #0078d4;
  --colorNeutralBackground1: #ffffff;
  --fontSizeBase300: 14px;
  --borderRadiusSmall: 2px;
}

/* src/Button.styles.ts */
.fui-Button-000001-base { /* extracted styles */ }",
    "extractedClasses": [
      "fui-Button-000001-base",
      "fui-Button-000001-actionable",
      "fui-Button-000001-compact",
    ],
    "success": true,
    "transformedCode": "export const getStyles = props => {
  return {
    root: ["fui-Button-000001-base", props.className]
  };
};",
  },
}
`;

exports[`FluentStyleExtractor Snapshot Tests should match snapshot for complex CSS-in-JS patterns: complex-css-in-js-patterns 1`] = `
{
  "input": {
    "code": "export const getStyles = (props) => {
  const { theme, size, variant, state, className } = props;
  const { palette, fonts, spacing, effects } = theme;

  const sizeMap = {
    small: { padding: spacing.s1, fontSize: fonts.small.fontSize },
    medium: { padding: spacing.m, fontSize: fonts.medium.fontSize },
    large: { padding: spacing.l, fontSize: fonts.large.fontSize }
  };

  const variantStyles = {
    primary: {
      backgroundColor: palette.themePrimary,
      color: palette.white,
      border: \`2px solid \${palette.themePrimary}\`
    },
    secondary: {
      backgroundColor: 'transparent',
      color: palette.themePrimary,
      border: \`2px solid \${palette.themePrimary}\`
    },
    ghost: {
      backgroundColor: 'transparent',
      color: palette.neutralPrimary,
      border: '2px solid transparent'
    }
  };

  return {
    root: [
      'ms-ComplexButton',
      {
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: '32px',
        fontFamily: fonts.medium.fontFamily,
        fontWeight: fonts.medium.fontWeight,
        textDecoration: 'none',
        textAlign: 'center',
        cursor: 'pointer',
        userSelect: 'none',
        borderRadius: effects.roundedCorner2,
        transition: 'all 0.1s ease',
        position: 'relative',
        overflow: 'hidden',
        selectors: {
          ':before': {
            content: '""',
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            backgroundColor: 'currentColor',
            opacity: 0,
            transition: 'opacity 0.1s ease'
          },
          ':hover:before': state !== 'disabled' ? {
            opacity: 0.1
          } : {},
          ':active:before': state !== 'disabled' ? {
            opacity: 0.2
          } : {},
          ':focus': {
            outline: \`2px solid \${palette.themePrimary}\`,
            outlineOffset: '2px'
          },
          ':focus:not(:focus-visible)': {
            outline: 'none'
          },
          '&[data-is-focus-visible="true"]': {
            outline: \`2px solid \${palette.themePrimary}\`,
            outlineOffset: '2px'
          }
        }
      },
      sizeMap[size] || sizeMap.medium,
      variantStyles[variant] || variantStyles.primary,
      state === 'disabled' && {
        opacity: 0.4,
        cursor: 'not-allowed',
        pointerEvents: 'none'
      },
      state === 'loading' && {
        cursor: 'wait',
        selectors: {
          ':after': {
            content: '""',
            position: 'absolute',
            width: '16px',
            height: '16px',
            border: '2px solid currentColor',
            borderRadius: '50%',
            borderTopColor: 'transparent',
            animation: 'spin 1s linear infinite'
          }
        }
      },
      className
    ],
    icon: {
      fontSize: '16px',
      lineHeight: 1,
      marginRight: spacing.xs,
      selectors: {
        '& svg': {
          display: 'block'
        }
      }
    },
    label: {
      fontSize: 'inherit',
      fontWeight: 'inherit',
      lineHeight: 1.2,
      margin: 0
    }
  };
};",
    "file": "ComplexButton.styles.ts",
  },
  "metadata": {
    "classPrefix": "fui",
    "filesProcessed": 1,
    "hasAnimations": true,
    "hasComplexLogic": true,
    "hasDataAttributes": true,
    "hasPseudoElements": true,
    "hasVariantMapping": true,
    "stylesExtracted": 3,
  },
  "output": {
    "css": "/* FluentUI Extracted Styles */
/* Generated by Heft FluentUI Style Extractor */

:root {
  --colorBrandBackground: #0078d4;
  --colorNeutralBackground1: #ffffff;
  --fontSizeBase300: 14px;
  --borderRadiusSmall: 2px;
}

/* src/ComplexButton.styles.ts */
.fui-ComplexButton-000001-base { /* extracted styles */ }",
    "extractedClasses": [
      "fui-ComplexButton-000001-base",
      "fui-ComplexButton-000001-actionable",
      "fui-ComplexButton-000001-compact",
    ],
    "success": true,
    "transformedCode": "export const getStyles = props => {
  return {
    root: ["fui-ComplexButton-000001-base", props.className]
  };
};",
  },
}
`;

exports[`FluentStyleExtractor Snapshot Tests should match snapshot for complex component with conditional styles: complex-card-transformation 1`] = `
{
  "input": {
    "code": "export const getStyles = (props) => {
  const { theme, actionable, compact, variant, className } = props;
  const { palette, fonts, effects } = theme || {
    palette: { white: '#ffffff', neutralLight: '#f3f2f1', themePrimary: '#0078d4' },
    fonts: { medium: { fontSize: '14px' } },
    effects: { roundedCorner2: '2px', elevation4: '0 2px 4px rgba(0,0,0,0.1)' }
  };

  return {
    root: [
      'ms-Card',
      {
        backgroundColor: palette.white,
        border: \`1px solid \${palette.neutralLight}\`,
        borderRadius: effects.roundedCorner2,
        padding: '16px',
        position: 'relative',
        userSelect: 'none',
        selectors: {
          ':focus': {
            outline: '0px solid'
          },
          '& .child-element': {
            color: palette.neutralPrimary || '#323130'
          }
        }
      },
      actionable && {
        cursor: 'pointer',
        selectors: {
          ':hover': {
            borderColor: palette.neutralTertiaryAlt || '#c8c6c4',
            boxShadow: effects.elevation4
          },
          ':hover:after': {
            content: '" "',
            position: 'absolute',
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            border: \`1px solid \${palette.neutralTertiaryAlt || '#c8c6c4'}\`,
            pointerEvents: 'none'
          }
        }
      },
      compact && {
        display: 'flex',
        padding: '8px',
        height: '64px'
      },
      variant === 'elevated' && {
        boxShadow: effects.elevation8 || '0 4px 8px rgba(0,0,0,0.1)',
        border: 'none'
      },
      className
    ],
    header: {
      padding: '0 0 8px 0',
      fontSize: fonts.medium.fontSize,
      fontWeight: '600',
      borderBottom: \`1px solid \${palette.neutralQuaternaryAlt || '#e1dfdd'}\`
    },
    content: {
      padding: '8px 0',
      lineHeight: '1.4'
    }
  };
};",
    "file": "ComplexCard.styles.ts",
  },
  "metadata": {
    "classPrefix": "fui",
    "filesProcessed": 1,
    "hasConditionalStyles": true,
    "hasNestedSelectors": true,
    "stylesExtracted": 3,
  },
  "output": {
    "css": "/* FluentUI Extracted Styles */
/* Generated by Heft FluentUI Style Extractor */

:root {
  --colorBrandBackground: #0078d4;
  --colorNeutralBackground1: #ffffff;
  --fontSizeBase300: 14px;
  --borderRadiusSmall: 2px;
}

/* src/ComplexCard.styles.ts */
.fui-ComplexCard-000001-base { /* extracted styles */ }",
    "extractedClasses": [
      "fui-ComplexCard-000001-base",
      "fui-ComplexCard-000001-actionable",
      "fui-ComplexCard-000001-compact",
    ],
    "success": true,
    "transformedCode": "export const getStyles = props => {
  return {
    root: ["fui-ComplexCard-000001-base", props.className]
  };
};",
  },
}
`;

exports[`FluentStyleExtractor Snapshot Tests should match snapshot for component with theme tokens and advanced selectors: document-card-transformation 1`] = `
{
  "input": {
    "code": "import { getGlobalClassNames } from '../../Styling';

const GlobalClassNames = {
  root: 'ms-DocumentCard',
  rootActionable: 'ms-DocumentCard--actionable'
};

export const getStyles = (props) => {
  const { className, theme, actionable } = props;
  const { palette, fonts, effects } = theme;

  const classNames = getGlobalClassNames(GlobalClassNames, theme);

  return {
    root: [
      classNames.root,
      {
        WebkitFontSmoothing: 'antialiased',
        backgroundColor: palette.white,
        border: \`1px solid \${palette.neutralLight}\`,
        maxWidth: '320px',
        minWidth: '206px',
        userSelect: 'none',
        position: 'relative',
        selectors: {
          ':focus': {
            outline: '0px solid'
          },
          '.ms-IsFocusVisible &:focus': {
            outline: \`2px solid \${palette.neutralSecondary}\`,
            borderRadius: effects.roundedCorner2
          },
          '& .ms-DocumentCardTitle': {
            paddingTop: '4px'
          }
        }
      },
      actionable && [
        classNames.rootActionable,
        {
          selectors: {
            ':hover': {
              cursor: 'pointer',
              borderColor: palette.neutralTertiaryAlt
            },
            ':hover:after': {
              content: '" "',
              position: 'absolute',
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              border: \`1px solid \${palette.neutralTertiaryAlt}\`,
              pointerEvents: 'none'
            }
          }
        }
      ],
      className
    ]
  };
};",
    "file": "DocumentCard.styles.ts",
  },
  "metadata": {
    "classPrefix": "fui",
    "filesProcessed": 1,
    "hasAdvancedSelectors": true,
    "hasGlobalClassNames": true,
    "hasThemeUsage": true,
    "stylesExtracted": 3,
  },
  "output": {
    "css": "/* FluentUI Extracted Styles */
/* Generated by Heft FluentUI Style Extractor */

:root {
  --colorBrandBackground: #0078d4;
  --colorNeutralBackground1: #ffffff;
  --fontSizeBase300: 14px;
  --borderRadiusSmall: 2px;
}

/* src/DocumentCard.styles.ts */
.fui-DocumentCard-000001-base { /* extracted styles */ }",
    "extractedClasses": [
      "fui-DocumentCard-000001-base",
      "fui-DocumentCard-000001-actionable",
      "fui-DocumentCard-000001-compact",
    ],
    "success": true,
    "transformedCode": "import { getGlobalClassNames } from '../../Styling';
const GlobalClassNames = {
  root: 'ms-DocumentCard',
  rootActionable: 'ms-DocumentCard--actionable'
};
export const getStyles = props => {
  return {
    root: ["fui-DocumentCard-000001-base", props.className]
  };
};",
  },
}
`;

exports[`FluentStyleExtractor Snapshot Tests should match snapshot for multiple component extraction with theme tokens: multi-component-with-theme-tokens 1`] = `
{
  "input": {
    "files": [
      {
        "code": "export const getStyles = (props) => ({
  root: {
    backgroundColor: props.primary ? 'var(--colorBrandBackground)' : 'var(--colorNeutralBackground1)',
    padding: '8px 16px',
    borderRadius: 'var(--borderRadiusSmall)',
    fontSize: 'var(--fontSizeBase300)'
  }
});",
        "name": "Button.styles.ts",
      },
      {
        "code": "export const getStyles = (props) => ({
  root: {
    backgroundColor: 'var(--colorNeutralBackground1)',
    border: '1px solid #f3f2f1',
    padding: props.compact ? '8px' : '16px',
    borderRadius: 'var(--borderRadiusSmall)'
  },
  header: {
    fontSize: 'var(--fontSizeBase300)',
    fontWeight: '600'
  }
});",
        "name": "Card.styles.ts",
      },
    ],
  },
  "metadata": {
    "classPrefix": "fui",
    "filesProcessed": 2,
    "hasThemeTokens": true,
    "stylesExtracted": 6,
    "themeTokens": {
      "borderRadiusSmall": "2px",
      "colorBrandBackground": "#0078d4",
      "colorNeutralBackground1": "#ffffff",
      "fontSizeBase300": "14px",
    },
  },
  "output": {
    "css": "/* FluentUI Extracted Styles */
/* Generated by Heft FluentUI Style Extractor */

:root {
  --colorBrandBackground: #0078d4;
  --colorNeutralBackground1: #ffffff;
  --fontSizeBase300: 14px;
  --borderRadiusSmall: 2px;
}

/* src/Button.styles.ts */
.fui-Button-000001-base { /* extracted styles */ }


/* src/Card.styles.ts */
.fui-Card-000002-base { /* extracted styles */ }",
    "success": true,
    "transformedFiles": [
      {
        "classes": [
          "fui-Button-000001-base",
          "fui-Button-000001-actionable",
          "fui-Button-000001-compact",
        ],
        "code": "export const getStyles = props => {
  return {
    root: ["fui-Button-000001-base", props.className]
  };
};",
        "name": "Button.styles.ts",
      },
      {
        "classes": [
          "fui-Card-000002-base",
          "fui-Card-000002-actionable",
          "fui-Card-000002-compact",
        ],
        "code": "export const getStyles = props => {
  return {
    root: ["fui-Card-000002-base", props.className]
  };
};",
        "name": "Card.styles.ts",
      },
    ],
  },
}
`;
